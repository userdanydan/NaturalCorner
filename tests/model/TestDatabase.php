<?php
require_once __DIR__ . '/../../exceptions/UtilisateurException.class.php';
require_once __DIR__ . '/../../exceptions/EmailAlreadyTakenException.class.php';
require_once __DIR__ . '/../../model/Utilisateur.class.php';
require_once __DIR__ . '/../../model/Database.inc.php';
require_once __DIR__ . '/../../model/Article.class.php';
require_once __DIR__ . '/../../model/Rayon.class.php';



/**
 * Test class for Utilisateur.
 * Generated by PHPUnit on 2015-12-29 at 19:31:51.
 */
class TestDatabase extends PHPUnit_Framework_TestCase {
    protected static $bdd;
    protected static $connection;
    protected static $utilisateur;
    protected static $rayon;
    protected static $article;
    static $test_increment;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public static function setUpBeforeClass() {
        self::$test_increment = rand();
        self::$bdd = new Database();
        self::$utilisateur = new Utilisateur("Daniel", "Dan", "DanyDan", password_hash("motdepasse", PASSWORD_BCRYPT, [ 
                "cost" => PASSWORD_BCRYPT_DEFAULT_COST 
        ]), "truc" . ++ self::$test_increment . "@troc.tr", "rue des petites fleurs 5", "1070", "Anderlecht", new DateTime("2015-01-01T00:00:00"), "198.168.0.1");
        self::$rayon = new Rayon("porte ". self::$test_increment);
        self::$article = new Article("poire" . self::$test_increment, 150, "poire bio de Wallonie", 1, self::$rayon->getId(), self::$rayon);
    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public static function tearDownAfterClass() {
        self::$utilisateur=NULL;
        self::$article=NULL;
        self::$bdd=NULL;
        self::$rayon=NULL;
    }
    
    /**
     * @covers Database::__construct
     * @covers Database::createDatabase();
     *
     * @todo Implement testSetId().
     */
    public function testCreateDatabase() {
        // On va vérifier si la base est bien créée et que la commande "SHOW TABLES" retourne bien le nom de la table UTILISATEUR.
        // TODO changer le test pour s'adapter à l'agrandissement de la bdd.
        //maj On utilise la même méthode mais avec DESCRIBE TABLES.
        try {
            self::$connection = new pdo('mysql:host=127.0.0.1:3306;dbname=NATURAL_CORNER', 'root', '');
        } catch ( PDOException $ex ) {
            echo '<p>' . $ex->getMessage() . '</p>';
            die(json_encode(array (
                    'outcome' => false,
                    'message' => 'Unable to connect to localhost1' 
            )));
        }
        try {
            $val=array();
            $result = self::$connection->query("SHOW TABLES");
            foreach ( $result as $ligne ) {
                array_push($val, $ligne [0]);
            }
            $this->assertEquals("ARTICLES", $val[0], "doit afficher ARTICLES");
        } catch ( PDOException $ex ) {
            echo '<p>' . $ex->getMessage() . '</p>';
            die(json_encode(array (
                    'outcome' => false,
                    'message' => 'Unable to connect to localhost1' 
            )));
        }
    }
    /**
     * @depends testCreateDatabase
     * @covers Database::addUser()
     */
    public function testAddUser() {
        // teste si le booléen "flag" indique que l'insertion s'est réalisée correctement.
        $insertionReussie = self::$bdd->addUser(self::$utilisateur);
        $this->assertTrue($insertionReussie);
        try {
            $insertionReussie = self::$bdd->addUser(self::$utilisateur);
            $this->fail("Aurait dû lancer une exception." . " ->" . $ue);
        } catch ( EmailAlreadyTakenException $eate ) {
            return;
        }
    }
    /**
     * @depends testCreateDatabase
     * @covers Database::addRayon()
     */
    public function testAddRayon() {
        // teste si le booléen "flag" indique que l'insertion s'est réalisée correctement.
        $insertionReussie = self::$bdd->addRayon(self::$rayon);
        $this->assertTrue($insertionReussie);

    }
    /**
     * @depends testAddRayon
     * @covers Database::getRayonParEmplacement()
     * @covers Database::addRayon()
     */
    public function testGetRayonParEmplacement() {
        $test_increment = rand();
        $rayon = new Rayon("porte test ".$test_increment);
        self::$bdd->addRayon($rayon);
        $rayonRecupere = self::$bdd->getRayonParEmplacement($rayon->getEmplacement());
        // L'objet récupéré doit être du type rayon.
        $this->assertTrue($rayonRecupere instanceof Rayon);
        // Est-ce que la méthode addRayonParEmplacement() fonctionne?
        $this->assertEquals($rayon->getEmplacement(), $rayonRecupere->getEmplacement());
    }
    /**
     * @depends testAddRayon
     * @depends testGetRayonParEmplacement
     * @depends testCreateDatabase
     * @covers Database::addArticle()
     */
    public function testAddArticle() {
        // teste si le booléen "flag" indique que l'insertion s'est réalisée correctement.
        $insertionReussie = self::$bdd->addArticle(self::$article);
        $this->assertTrue($insertionReussie);
        
    }
    /**
     * @depends testCreateDatabase
     * @covers Database::addUser()
     */
    public function testCheckPassword() {
        $email = "truc" . ++ self::$test_increment . "@troc.tr";
        $utilisateur1 = new Utilisateur("dada", "dudu", "pseudoTest", password_hash("pwdTest", PASSWORD_BCRYPT, [ 
                "cost" => PASSWORD_BCRYPT_DEFAULT_COST 
        ]), $email, "rue des petites fleurs 5", "1070", "Anderlecht", new DateTime("2015-01-01T00:00:00"), "192.168.0.1");
        self::$bdd->addUser($utilisateur1);
        $this->assertFalse(self::$bdd->checkPassword("mauvaistest@email.com", "pwdTest"));
        $this->assertFalse(self::$bdd->checkPassword($email, "mauvaisPwdtest"));
        
        $this->assertTrue(self::$bdd->checkPassword($email, "pwdTest"));
    }
    /**
     * @depends testCreateDatabase
     * @covers Database::addUser()
     */
    public function testCheckAdminPassword() {
        
    
        $this->assertTrue(self::$bdd->checkAdminPassword('admin', 'admin'));
    }
    /**
     * @depends testCreateDatabase
     * @covers Database::addUser()
     */
    public function testCheckEmailAvailability() {
        $email = "truc" . ++ self::$test_increment . "@troc.tr";
        $utilisateur1 = new Utilisateur("dada", "dudu", "pseudoTest", password_hash("pwdTest", PASSWORD_BCRYPT, [ 
                "cost" => PASSWORD_BCRYPT_DEFAULT_COST 
        ]), $email, "rue des petites fleurs 5", "1070", "Anderlecht", new DateTime("2015-01-01T00:00:00"), "192.168.0.1");
        try {
            self::$bdd->addUser($utilisateur1);
        } catch ( EmailAlreadyTakenException $eate ) {
            return;
        }
        $this->assertTrue(self::$bdd->checkEmailAvailability("contretest@test.com"));
        $this->assertFalse(self::$bdd->checkEmailAvailability($email));
    }
    /**
     * @depends testAddUser
     * @covers Database::getUser()
     * @covers Database::addUser()
     */
    public function testGetUser() {
        $test_increment = rand();
        $utilisateur = new Utilisateur("test".$test_increment, "test".$test_increment, "test".$test_increment, "test".$test_increment,
                "test".$test_increment."@test.com", "test".$test_increment, "1000", "Bxl", new DateTime("2015-01-01T00:00:00"), "198.168.0.1");
        self::$bdd->addUser($utilisateur);
        $utilisateurRecupere = self::$bdd->getUser($utilisateur->getAdresseMail());
        // Il serait bien que l'objet récupéré soit du type utilisateur.
        $this->assertTrue($utilisateurRecupere instanceof Utilisateur);
        // et vérifie par la même occasion que la méthode addUser() fonctionne.
        $this->assertEquals($utilisateur->getPrenom(), $utilisateurRecupere->getPrenom(), "aurait dû afficher test".$test_increment);
    }
    /**
     * @depends testAddUser
     * @covers Database::getAllUsers()
     * @covers Database::addUser()
     */
    public function testGetAllUsers() {
        $utilisateursRecuperes = array();
        $utilisateursRecuperes = self::$bdd->getAllUsers();
        $this->assertEquals("Daniel", $utilisateursRecuperes[0]->getPrenom(), "aurait dû afficher Daniel");
        $this->assertTrue($utilisateursRecuperes[0] instanceof Utilisateur);
    }
    /**
     * @depends testAddArticle
     * @covers Database::getArticle()
     * @covers Database::addArticle()
     */
    public function testGetArticle() {
        $test_increment = rand();
        $emplacement = "porte test ".$test_increment;
        $rayon = new Rayon($emplacement);
        self::$bdd->addRayon($rayon);
        $rayonRecupere = self::$bdd->getRayonParEmplacement($emplacement);
        $article = new Article("test".$test_increment, 100, "test".$test_increment, 1, 0, $rayonRecupere);
        self::$bdd->addArticle($article);
        $articleRecupere = self::$bdd->getArticle($article->getDenomination());
        // L'objet récupéré doit être du type article.
        $this->assertTrue($articleRecupere instanceof Article);
        // Est-ce que la méthode addArticle() fonctionne?
        $this->assertEquals($article->getCommentaire(), $articleRecupere->getCommentaire(), "aurait dû afficher poire bio de Wallonie");
    }
    /**
     * @depends testGetUser
     * @depends testAddUser
     * @covers Database::getUser()
     * @covers Database::addUser()
     * @covers Database::removeUser()
     */
    public function testRemoveUser() {
        $utilisateurDeplace = self::$bdd->removeUser(self::$utilisateur->getAdresseMail());
        // une fois retirés de la base de données, les résultats de getUser->getNom() doivent être null.
        $this->assertNull(self::$bdd->getUser(self::$utilisateur->getAdresseMail()));
        $this->assertNull(self::$bdd->getUser(self::$utilisateur->getAdresseMail()));
        $this->assertNull(self::$bdd->getUser(self::$utilisateur->getAdresseMail()));
        // booléen "flag" nous mettant au courant que l'opération "remove" a bien fonctionné.
        $this->assertTrue($utilisateurDeplace);
        
        // Testons encore les trois méthodes add, remove et get.
        // L'ajout des dépendances en commentaire de la méthode nous assure que les tests se déroulent dans le bon ordre.
        $utilisateur1 = new Utilisateur("prenom1", "nom1", "pseudo1", password_hash("motdepasse1", PASSWORD_BCRYPT, [ 
                "cost" => PASSWORD_BCRYPT_DEFAULT_COST 
        ]), "truc" . ++ self::$test_increment . "@troc.tr", "rue des petites fleurs 5", "1040", "Etterbeek", new DateTime("2015-01-01T00:00:00"), "192.168.0.1");
        $insertionUtilisateur1 = self::$bdd->addUser($utilisateur1);
        
        $utilisateur2 = new Utilisateur("prenom2", "nom2", "pseudo2", password_hash("motdepasse2", PASSWORD_BCRYPT, [ 
                "cost" => PASSWORD_BCRYPT_DEFAULT_COST 
        ]), "truc" . ++ self::$test_increment . "@troc.tr", "rue des petites fleurs 5", "1040", "Anderlecht", new DateTime("2015-01-01T00:00:00"), "192.168.0.1");
        $insertionUtilisateur2 = self::$bdd->addUser($utilisateur2);
        
        $utilisateur3 = new Utilisateur("prenom3", "nom3", "pseudo3", password_hash("motdepasse3", PASSWORD_BCRYPT, [ 
                "cost" => PASSWORD_BCRYPT_DEFAULT_COST 
        ]), "truc" . ++ self::$test_increment . "@troc.tr", "rue des petites fleurs 5", "1040", "Anderlecht", new DateTime("2015-01-01T00:00:00"), "192.168.0.1");
        $insertionUtilisateur3 = self::$bdd->addUser($utilisateur3);
        
        // utilisateur1
        
        $this->assertTrue($insertionUtilisateur1);
        $utilisateurBDD1 = self::$bdd->getUser($utilisateur1->getAdresseMail());
        $this->assertTrue($utilisateurBDD1 instanceof Utilisateur);
        $this->assertEquals($utilisateur1->getPrenom(), $utilisateurBDD1->getPrenom(), "aurait dû afficher prenom1");
        $this->assertEquals($utilisateur1->getNom(), $utilisateurBDD1->getNom(), "aurait dû afficher nom1");
        $this->assertEquals($utilisateur1->getPseudo(), $utilisateurBDD1->getPseudo(), "aurait dû afficher pseudo1");
        
        // utilisateur2
        
        $this->assertTrue($insertionUtilisateur2);
        $utilisateurBBD2 = self::$bdd->getUser($utilisateur2->getAdresseMail());
        $this->assertTrue($utilisateurBBD2 instanceof Utilisateur);
        $this->assertEquals($utilisateur2->getPrenom(), $utilisateurBBD2->getPrenom(), "aurait dû afficher prenom2");
        $this->assertEquals($utilisateur2->getNom(), $utilisateurBBD2->getNom(), "aurait dû afficher nom2");
        $this->assertEquals($utilisateur2->getPseudo(), $utilisateurBBD2->getPseudo(), "aurait dû afficher pseudo2");
        
        // utilisateur3
        
        $this->assertTrue($insertionUtilisateur3);
        $utilisateurBBD3 = self::$bdd->getUser($utilisateur3->getAdresseMail());
        $this->assertTrue($utilisateurBBD3 instanceof Utilisateur);
        $this->assertEquals($utilisateur3->getPrenom(), $utilisateurBBD3->getPrenom(), "aurait dû afficher prenom3");
        $this->assertEquals($utilisateur3->getNom(), $utilisateurBBD3->getNom(), "aurait dû afficher nom3");
        $this->assertEquals($utilisateur3->getPseudo(), $utilisateurBBD3->getPseudo(), "aurait dû afficher pseudo3");
        
        // test de removeUser()
        $utilisateurRetire1 = self::$bdd->removeUser($utilisateur1->getAdresseMail());
        $this->assertTrue($utilisateurRetire1);
        
        $this->assertNull(self::$bdd->getUser($utilisateur1->getAdresseMail()));
        $this->assertNull(self::$bdd->getUser($utilisateur1->getAdresseMail()));
        $this->assertNull(self::$bdd->getUser($utilisateur1->getAdresseMail()));
        
        $utilisateurRetire2 = self::$bdd->removeUser($utilisateur2->getAdresseMail());
        $this->assertTrue($utilisateurRetire2);
        
        $this->assertNull(self::$bdd->getUser($utilisateur2->getAdresseMail()));
        $this->assertNull(self::$bdd->getUser($utilisateur2->getAdresseMail()));
        $this->assertNull(self::$bdd->getUser($utilisateur2->getAdresseMail()));
        
        $utilisateurRetire3 = self::$bdd->removeUser($utilisateur3->getAdresseMail());
        $this->assertTrue($utilisateurRetire3);
        
        $this->assertNull(self::$bdd->getUser($utilisateur3->getAdresseMail()));
        $this->assertNull(self::$bdd->getUser($utilisateur3->getAdresseMail()));
        $this->assertNull(self::$bdd->getUser($utilisateur3->getAdresseMail()));
    }
    /**
     * @depends testGetArticle
     * @depends testAddArticle
     * @covers Database::getArticle()
     * @covers Database::addUArticle()
     * @covers Database::removeArticle()
     */
    public function testRemoveArticle() {
        $articleDeplace = self::$bdd->removeArticle(self::$article->getDenomination());
        // booléen "flag" nous mettant au courant que l'opération "remove" a bien fonctionné.
        $this->assertTrue($articleDeplace);
        // une fois retiré de la base de données, les résultats de getArticle() doivent être null.
        $this->assertNull(self::$bdd->getArticle(self::$article->getDenomination()));

        
        // Testons encore les trois méthodes add, remove et get.
        // L'ajout des dépendances en commentaire de la méthode nous assure que les tests se déroulent dans le bon ordre.
        $test_increment = rand();
        $emplacement = "porte test ".$test_increment;
        $rayon = new Rayon($emplacement);
        self::$bdd->addRayon($rayon);
        $rayonRecupere = self::$bdd->getRayonParEmplacement($emplacement);
       
        $article1 = new Article("article1" . ++self::$test_increment, 100, "commentaire1", 1, 0, $rayonRecupere);
        $insertionArticle1 = self::$bdd->addArticle($article1);
        
        $article2 = new Article("article2" . ++self::$test_increment, 200, "commentaire2", 1, 0, $rayonRecupere);
        $insertionArticle2 = self::$bdd->addArticle($article2);
        
        $article3 = new Article("article3" . ++self::$test_increment, 300, "commentaire3", 0, 1, $rayonRecupere);
        $insertionArticle3 = self::$bdd->addArticle($article3);
        
        // article1
        
        $this->assertTrue($insertionArticle1);
        $articleBDD1 = self::$bdd->getArticle($article1->getDenomination());
        $this->assertTrue($articleBDD1 instanceof Article);
        $this->assertEquals($article1->getPrixUnitaire(), $articleBDD1->getPrixUnitaire(), "aurait dû afficher 100");
        $this->assertEquals($article1->getCommentaire(), $articleBDD1->getCommentaire(), "aurait dû afficher commentaire1");
        $this->assertEquals($article1->isEnVente(), $articleBDD1->isEnVente(), "aurait dû afficher true");
        $this->assertEquals($article1->isEnPromo(), $articleBDD1->isEnPromo(), "aurait dû afficher false");
        
        // article2
        
        $this->assertTrue($insertionArticle2);
        $articleBDD2 = self::$bdd->getArticle($article2->getDenomination());
        $this->assertTrue($articleBDD2 instanceof Article);
        $this->assertEquals($article2->getPrixUnitaire(), $articleBDD2->getPrixUnitaire(), "aurait dû afficher 200");
        $this->assertEquals($article2->getCommentaire(), $articleBDD2->getCommentaire(), "aurait dû afficher commentaire2");
        $this->assertEquals($article2->isEnVente(), $articleBDD2->isEnVente(), "aurait dû afficher true");
        $this->assertEquals($article2->isEnPromo(), $articleBDD2->isEnPromo(), "aurait dû afficher false");
        
        // article3
        
        $this->assertTrue($insertionArticle3);
        $articleBDD3 = self::$bdd->getArticle($article3->getDenomination());
        $this->assertTrue($articleBDD3 instanceof Article);
        $this->assertEquals($article3->getPrixUnitaire(), $articleBDD3->getPrixUnitaire(), "aurait dû afficher 300");
        $this->assertEquals($article3->getCommentaire(), $articleBDD3->getCommentaire(), "aurait dû afficher commentaire3");
        $this->assertEquals($article3->isEnVente(), $articleBDD3->isEnVente(), "aurait dû afficher false");
        $this->assertEquals($article3->isEnPromo(), $articleBDD3->isEnPromo(), "aurait dû afficher true");
        
        
        // test de removeArticle()
        $articleRetire1 = self::$bdd->removeArticle($article1->getDenomination());
        $this->assertTrue($articleRetire1);
        var_dump(self::$bdd->getArticle($article1->getDenomination()));
        $this->assertNull(self::$bdd->getArticle($article1->getDenomination()));
        
        $articleRetire2 = self::$bdd->removeArticle($article2->getDenomination());
        $this->assertTrue($articleRetire2);
        
        $this->assertNull(self::$bdd->getArticle($article2->getDenomination()));
        
        $articleRetire3 = self::$bdd->removeArticle($article3->getDenomination());
        $this->assertTrue($articleRetire3);
        
        $this->assertNull(self::$bdd->getArticle($article3->getDenomination()));
    }
    /**
     * @depends testCreateDatabase
     * @covers Database::getUser()
     * @covers Database::addUser()
     */
    public function testUpdateUser() {
        $test_increment = rand();
        $utilisateur = new Utilisateur("test".$test_increment, "test".$test_increment, "test".$test_increment, "test".$test_increment,
                "test".$test_increment."@test.com", "test".$test_increment, "1000", "Bxl", new DateTime("2015-01-01T00:00:00"), "198.168.0.1");
        self::$bdd->addUser($utilisateur);
        $utilisateurRecupere = self::$bdd->getUser($utilisateur->getAdresseMail());
        // vérification
        $this->assertEquals($utilisateur->getPrenom(), self::$bdd->getUser($utilisateur->getAdresseMail())->getPrenom());
        // modification du pseudo
        $utilisateur->setPseudo("nouveauPseudo1");
        try {
            self::$bdd->updateUser($utilisateur, $utilisateur->getAdresseMail());
        } catch ( EmailAlreadyTakenException $eate ) {
            return;
        }
        
        $this->assertEquals("nouveauPseudo1", self::$bdd->getUser($utilisateur->getAdresseMail())->getPseudo(), "Aurait dû afficher nouveauPseudo");
        
        // je change uniquement le mot de passe.
        try {
            $utilisateur->setPass(password_hash("nomduchat", PASSWORD_BCRYPT, [ 
                    "cost" => PASSWORD_BCRYPT_DEFAULT_COST 
            ]));
        } catch ( UtilisateurException $ue ) {
            echo '<p>' . $ue->getMessage() . '</p>';
        }
        
        self::$bdd->updateUser($utilisateur, $utilisateur->getAdresseMail());
        // L'utilisateur reçoit un nouveau mot de passe.
        // Voyons si le hash correspond à celui de la base de données.
        $utilisateurUpdate = self::$bdd->getUser($utilisateur->getAdresseMail());
        $this->assertTrue(password_verify("nomduchat", $utilisateurUpdate->getPass()));
    }
    /**
     * @depends testCreateDatabase
     * @covers Database::getArticle()
     * @covers Database::addArticle()
     */
    public function testUpdateArticle() {
        $test_increment = rand();
        $emplacement = "porte test ".$test_increment;
        $rayon = new Rayon($emplacement);
        self::$bdd->addRayon($rayon);
        $rayonRecupere = self::$bdd->getRayonParEmplacement($emplacement);
       
        $article1 = new Article("article1" . ++self::$test_increment, 100, "commentaire1", 1, 0, $rayonRecupere);
        $insertionArticle1 = self::$bdd->addArticle($article1);
        // vérification.
        $this->assertEquals($article1->getCommentaire(), self::$bdd->getArticle($article1->getDenomination())->getCommentaire());
        // modification du commentaire.
        $article1->setCommentaire("nouveauCommentaire1");
        try {
            self::$bdd->updateArticle($article1, $article1->getDenomination());
        } catch ( ArticleException $ae ) {
            return;
        }
    
        $this->assertEquals("nouveauCommentaire1", 
                self::$bdd->getArticle($article1->getDenomination())->getCommentaire(), 
                    "Aurait dû afficher nouveauCommentaire1");
    }
    /**
     * @depends testCreateDatabase
     * @covers Database::getArticle()
     * @covers Database::addArticle()
     */
    public function testChercherParPrix(){
        $test_increment = rand();
        $emplacement = "porte test ".$test_increment;
        $rayon = new Rayon($emplacement);
        self::$bdd->addRayon($rayon);
        $rayonRecupere = self::$bdd->getRayonParEmplacement($emplacement);
        $articlesTest = array();
        array_push($articlesTest, new Article("poire".rand(), 100, "", 1, 0, $rayonRecupere));
        array_push($articlesTest, new Article("poire".rand(), 200, "", 1, 0, $rayonRecupere));
        array_push($articlesTest, new Article("poire".rand(), 300, "", 1, 0, $rayonRecupere));
        array_push($articlesTest, new Article("poire".rand(), 0, "", 1, 0, $rayonRecupere));
        
        self::$bdd->addArticle($articlesTest[0]);
        self::$bdd->addArticle($articlesTest[1]);
        self::$bdd->addArticle($articlesTest[2]);
        self::$bdd->addArticle($articlesTest[3]);
        // On va vérifier si tous les articles retrouvés sont bien dans la fourchette de prix.
        $resultats = self::$bdd->chercherParPrix(250);
        foreach ($resultats as $resultat)
            $this->assertTrue($resultat->getPrixUnitaire()<=250);
        // La nature de ce test n'étant pas exhaustif, je le recommence avec d'autres valeurs.
        $resultats2 = self::$bdd->chercherParPrix(100);
        foreach ($resultats2 as $resultat)
            $this->assertTrue($resultat->getPrixUnitaire()<=100);
        
        $resultats3 = self::$bdd->chercherParPrix(500);
        foreach ($resultats3 as $resultat)
            $this->assertTrue($resultat->getPrixUnitaire()<=500);
    }

}