<?php

require_once '/Users/ivymike/Documents/workspacePHP/NaturalCorner/exceptions/UtilisateurException.class.php';
require_once '/Users/ivymike/Documents/workspacePHP/NaturalCorner/model/Utilisateur.class.php';
require_once '/Users/ivymike/Documents/workspacePHP/NaturalCorner/model/Database.inc.php';

/**
 * Test class for Utilisateur.
 * Generated by PHPUnit on 2015-12-29 at 19:31:51.
 */
class TestDataBase extends PHPUnit_Framework_TestCase
{
	protected $object;
	protected $connection;
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		
	}
	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		unset($this->object);
	}
	
	/**
	 * @covers Utilisateur::setId
	 * @todo Implement testSetId().
	 */
	public function testCreateDatabase()
	{
		$this->object = new Database();
		try{
			$this->connection= new pdo('mysql:host=127.0.0.1:3306;dbname=NATURAL_CORNER_TEST', 'root', '');
		}catch(PDOException $ex){
			echo '<p>'.$ex->getMessage().'</p>';
			die(json_encode(
					array('outcome' => false, 'message' => 'Unable to connect to localhost1')
					)
					);
		}
		try{
			$val;
			$result = $this->connection->query("SHOW TABLES");
			foreach($result as $ligne){
				$val.='---'.$ligne[0].'---';
			}
			$this->assertEquals("---UTILISATEURS---", $val , "doit afficher ---UTILISATEURS---");
							
		}catch(PDOException $ex){
			echo '<p>'.$ex->getMessage().'</p>';
			die(json_encode(
					array('outcome' => false, 'message' => 'Unable to connect to localhost1')
					)
					);
		}
	}
	public function testAddUser(){
		$this->object = new Database();
		$utilisateur = new Utilisateur("Daniel", "Dan", "DanyDan", md5("motdepasse"), "truc@troc.tr", "rue des petites fleurs 5",
				"1070", "Anderlecht", new DateTime("2015-01-01T00:00:00"), "192.168.0.1");
		$insertionReussie = $this->object->addUser($utilisateur);
		$this->assertTrue($insertionReussie);
	}
	public function testGetUser(){
		$this->object = new Database();
		$utilisateurRecupere = $this->object->getUser("Daniel", "Dan", "DanyDan");
		//Il serait bien que l'objet récupéré soit du type utilisateur.
		$this->assertTrue($utilisateurRecupere instanceOf Utilisateur);
		//print_r($utilisateurRecupere);
		$this->assertEquals("Daniel", $utilisateurRecupere->getPrenom(), "aurait dû afficher Daniel");		
	}
	public function testRemoveUser(){
		$this->object = new Database();
		$this->object->removeUser(1);
		$this->assertNull($this->object->getUser("Daniel", "Dan", "DanyDan"));		
	}
	public function testUpdateUser(){
		$this->object = new Database();
		//je change uniquement le mot de passe.
		$utilisateur = new Utilisateur("Daniel", "Dan", "DanyDan", md5("nouveaumotdepasse"), "truc@troc.tr", "rue des petites fleurs 5",
				"1070", "Anderlecht", new DateTime("2015-01-01T00:00:00"), "192.168.0.1");
		$this->object->updateUser("Daniel", "Dan", "DanyDan", $utilisateur);
		// L'utilisateur de ID 1 reçoit un nouveau mot de passe. 
		$hashDuMotDePasse = md5("nouveaumotdepasse");
		//Voyons si le hash correspond à celui de la base de données.
		$utilisateurUpdate = $this->object->getUser("Daniel", "Dan", "DanyDan");
		$this->assertEquals($hashDuMotDePasse, $utilisateurUpdate->getPass());
	}

}