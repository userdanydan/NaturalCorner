<?php

require_once __DIR__.'/../../model/Panier.class.php';
require_once __DIR__.'/../../model/Article.class.php';
require_once __DIR__.'/../../model/Rayon.class.php';
require_once __DIR__.'/../../model/LignePanier.class.php';

/**
 * Test class for Panier.
 * Generated by PHPUnit on 2016-03-05 at 19:39:15.
 */
class PanierTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Panier
     */
    protected $panier;
    protected $lignesPanier;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $this->panier = new Panier();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->panier=null;
    }
    /**
     * @covers Panier::ajouterLigne()
     * @covers Panier::getLignePanier()
     */
    public function testAjouterLigne()
    {
        $rayon = new Rayon("porte 1");
        $article = new Article("poire", 120, "poire bio de Flandre", 1, 0, $rayon);
        $ligne = new LignePanier($article, 2);
        $this->panier->ajouterLigne($ligne);
        $this->assertEquals($this->panier->getLignePanier(0), $ligne);
        $ligne=null;
        $article=null;
    }

    /**
     * @covers Panier::retirerLigne()
     * @covers Panier::ajouterLigne()
     * @covers Panier::getLignePanier()
     */
    public function testRetirerLigne()
    {
        $rayon = new Rayon("porte 1");
        $article = new Article("poire", 120, "poire bio de Flandre", 1, 0, $rayon);
        $ligne = new LignePanier($article, 2);
        $this->panier->ajouterLigne($ligne);
        $this->assertEquals($this->panier->getLignePanier(0), $ligne);       
        $this->panier->retirerLigne(0);       
        $this->assertEquals($this->panier->getLignePanier(0), null);       
    }
    
    /**
     * @covers Panier::getNombreArticle()
     * @covers Panier::ajouterLigne()
     */
    public function testGetNombreArticle()
    {
        $rayon = new Rayon("porte 1");
        $article = new Article("poire", 120, "poire bio de Flandre", 1, 0, $rayon);
        $ligne = new LignePanier($article, 2);
        $this->panier->ajouterLigne($ligne);
        $rayon2 = new Rayon("porte 2");
        $article2 = new Article("poire", 130, "poire bio", 1, 0, $rayon2);
        $ligne2 = new LignePanier($article2, 6);
        $this->panier->ajouterLigne($ligne2);
        
        $this->assertEquals($this->panier->getNombreArticle(), 8);

    }
    /**
     * @covers Panier::getTotal()
     * @covers Panier::ajouterLigne()
     */
    public function testTotal()
    {
        $rayon = new Rayon("porte 1");
        $article = new Article("poire", 120, "poire bio de Flandre", 1, 0, $rayon);
        $ligne = new LignePanier($article, 2);
        $this->panier->ajouterLigne($ligne);
        
        $this->assertEquals($this->panier->getTotal(), 240);
        
    
        $rayon2 = new Rayon("porte 2");
        $article2 = new Article("poire", 130, "poire bio", 1, 0, $rayon2);
        $ligne2 = new LignePanier($article2, 6);
        $this->panier->ajouterLigne($ligne2);
    
        $this->assertEquals($this->panier->getTotal(), 1020);
        
    }
    
    /**
     * @covers Panier::recalculer()
     * @covers Panier::ajouterLigne()
     * @covers Panier::getLignePanier()
     */
    public function testRecalculer()
    {
        $rayon = new Rayon("porte 1");
        $article = new Article("poire", 120, "poire bio de Flandre", 1, 0, $rayon);
        $ligne = new LignePanier($article, 2);
        $this->panier->ajouterLigne($ligne);
        $this->assertEquals($this->panier->getLignePanier(0), $ligne);
        // 1er paramètre = l'id de la ligne, le 2ème = le nombre d'articles.
        $this->panier->recalculer(0, 3);
        
        $this->assertEquals($this->panier->getLignePanier(0)->getQuantite(), 3);
        
    }
    /**
     * @covers Panier::vider()
     * @covers Panier::ajouterLigne()
     * @covers Panier::getLignePanier()
     */
    public function testVider()
    {
        $rayon = new Rayon("porte 1");
        $article = new Article("poire", 120, "poire bio de Flandre", 1, 0, $rayon);
        $ligne = new LignePanier($article, 2);
        $this->panier->ajouterLigne($ligne);
        
        $this->panier->ajouterLigne(new LignePanier(new Article("pomme", 150, "pomme bio", 1, 0, new Rayon("porte 2")), 5));
        $this->panier->ajouterLigne(new LignePanier(new Article("orange", 230, "orange d'Espagne bio", 1, 0, new Rayon("porte 2")), 2));
        $this->panier->ajouterLigne(new LignePanier(new Article("kiwi", 250, "kiwi blanc", 1, 0, new Rayon("porte 2")),1));
        
        $this->panier->vider();
        
        $this->assertEquals($this->panier->getLignePanier(0), null);
        $this->assertEquals($this->panier->getLignePanier(1), null);
        $this->assertEquals($this->panier->getLignePanier(2), null);
        $this->assertEquals($this->panier->getLignePanier(3), null);  
    }
}ll
?>
