<?php

require_once '/Users/ivymike/Documents/workspacePHP/NaturalCorner/exceptions/UtilisateurException.class.php';
require_once '/Users/ivymike/Documents/workspacePHP/NaturalCorner/model/Utilisateur.class.php';

/**
 * Test class for Utilisateur.
 * Generated by PHPUnit on 2015-12-29 at 19:31:51.
 */
class UtilisateurTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Utilisateur
     */
    protected $utilisateurDummy;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	$this->utilisateurDummy = new Utilisateur("Daniel", "Dan", "DanyDan", "Motdepasse1", 
    			"truc@troc.tr", "rue des petites fleurs 5",
    			"1070", "Anderlecht", new DateTime("2015-01-01T00:00:00"), "192.168.0.1");       
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
		$this->utilisateurDummy=null;
    }
    /**
     * @covers Utilisateur::getId
     * @todo Implement testGetId().
     */
    public function testGetId()
    {
    	$this->assertEquals($this->utilisateurDummy->getId(), 0, "devrait afficher 0");
    	
    }
    /**
     * @covers Utilisateur::setId
     * @todo Implement testSetId().
     */
    public function testSetId()
    {
    	$this->utilisateurDummy->setId(1000);
    	$this->assertEquals($this->utilisateurDummy->getId(), 1000, "devrait aficher 1000");
    	
    	
    	try{
    		$this->utilisateurDummy->setId(-1);
    	}catch(UtilisateurException $ue){
    		return;
    	}
    	$this>fail( "aurait dû lancer une exception.");

    }

    /**
     * @covers Utilisateur::getPrenom
     * @todo Implement testGetPrenom().
     */
    public function testGetPrenom()
    {
        
        $this->assertEquals("Daniel", $this->utilisateurDummy->getPrenom(), "Devrait afficher Daniel");
    }

    /**
     * @covers Utilisateur::setPrenom
     * @todo Implement testSetPrenom().
     */
    public function testSetPrenom()
    { 	
    	// tests du setter
    	// test de l'exception 
    	   
    	try{
    		$this->utilisateurDummy->setPrenom("NouveauPrenom");
    	}catch(UtilisateurException $ue){
    		
    		$this->fail( "n'aurait pas dû lancer une exception."." ->".$ue);
    	}
    	
    	$this->assertEquals($this->utilisateurDummy->getPrenom(), "NouveauPrenom", "devrait afficher NouveauPrenom");
    	
    	// test de l'exception : n'accepte pas un string n'ayant pas au moins trois caractères.
    	   
    	try{
    		$this->utilisateurDummy->setPrenom("da");
    	}catch(UtilisateurException $ue){
    		return;
    	}
    	$this->fail( "aurait dû lancer une exception.");
    	
    	// pas d'alphanumérique
    	
    	try{
    		$this->utilisateurDummy->setPrenom("dada3");
    	}catch(UtilisateurException $ue){
    		return;
    	}
    	$this->fail( "aurait dû lancer une exception.");
    }

	/**
     * @covers Utilisateur::getNom
     * @todo Implement testGetNom().
     */
    public function testGetNom()
    {
        $this->assertEquals("Dan", $this->utilisateurDummy->getNom(), "devrait afficher Dan");
    
    }

    /**
     * @covers Utilisateur::setNom
     * @todo Implement testSetNom().
     */
    public function testSetNom()
    {
    	// tests du setter
    	// test de l'exception 
    	   
    	try{
    		$this->utilisateurDummy->setNom("NouveauNom");
    	}catch(UtilisateurException $ue){
    		
    		$this->fail( "n'aurait pas dû lancer une exception."." ->".$ue);
    	}
    	
    	$this->assertEquals($this->utilisateurDummy->getNom(), "NouveauNom", "devrait aficher NouveauNom");
    	
    	// test de l'exception : n'accepte pas un string n'ayant pas au moins trois caractères.
    	   
    	try{
    		$this->utilisateurDummy->setNom("da");
    	}catch(UtilisateurException $ue){
    		return;
    	}
    	$this->fail( "aurait dû lancer une exception.");
    	
    	// pas d'alphanumérique
    	
    	try{
    		$this->utilisateurDummy->setNom("dada3");
    	}catch(UtilisateurException $ue){
    		return;
    	}
    	$this->fail( "aurait dû lancer une exception.");
    }

    /**
     * @covers Utilisateur::getPseudo
     * @todo Implement testGetPseudo().
     */
    public function testGetPseudo()
    {
        $this->assertEquals("DanyDan", $this->utilisateurDummy->getPseudo(), "devrait afficher DanyDan");
    }    

    /**
     * @covers Utilisateur::setPseudo
     * @todo Implement testSetPseudo().
     */
    public function testSetPseudo()
    {
       // tests du setter
    	// test de l'exception 
    	   
    	try{
    		$this->utilisateurDummy->setPseudo("NouveauPseudo");
    	}catch(UtilisateurException $ue){
    		
    		$this->fail( "n'aurait pas dû lancer une exception."." ->".$ue);
    	}
    	
    	$this->assertEquals($this->utilisateurDummy->getPseudo(), "NouveauPseudo", "devrait aficher NouveauPseudo");
    	
    	// test de l'exception : n'accepte pas un string n'ayant pas au moins trois caractères.
    	   
    	try{
    		$this->utilisateurDummy->setPseudo("da");
    	}catch(UtilisateurException $ue){
    		return;
    	}
    	$this->fail( "aurait dû lancer une exception.");
    	
    	// pas d'alphanumérique
    	
    	try{
    		$this->utilisateurDummy->setPseudo("dada3");
    	}catch(UtilisateurException $ue){
    		return;
    	}
    	$this->fail( "aurait dû lancer une exception.");
    }
    /**
     * @covers Utilisateur::getPass
     * @todo Implement testGetPass().
     */
    public function testGetPass()
    {
    	
        $this->assertEquals("Motdepasse1", $this->utilisateurDummy->getPass(), "devrait afficher motdepasse");
    }


    /**
     * @covers Utilisateur::setPass
     * @todo Implement testSetPass().
     */
    public function testSetPass()
    {
    	//mot de passe avec moins de 6 caractères.
    	try{
    		$this->utilisateurDummy->setPass("CouC1");
    	}catch(UtilisateurException $ue){
    		return;
    	}
    	$this->fail('aurait dû lancer une exception');
    	
    	//mot de passe sans chiffre et sans majuscule.
    	try{
    		$this->utilisateurDummy->setPass("passtest");
    	}catch(UtilisateurException $ue){
    		return;
    	}
        $this->fail('aurait dû lancer une exception');
        
        // mot de passe uniquement avec des majuscules.
        try{
        	$this->utilisateurDummy->setPass("PASSTEST");
        }catch(UtilisateurException $ue){
        	return;
        }
        $this->fail('aurait dû lancer une exception');
        
        //mot de passe uniquement avec des chiffres.
        try{
        	$this->utilisateurDummy->setPass("01222324234");
        }catch(UtilisateurException $ue){
        	return;
        }
        $this->fail('aurait dû lancer une exception');
        
        //mot de passe avec au moins une majuscule, une minuscule et un chiffre.
        $this->utilisateurDummy->setPass("coucoucoU1");
        $this->assetEquals("coucoucoU1", $this->utilisateurDummy->getPass());
        
        //mot de passe avec deux majuscules, une minuscule et un chiffre.
        $this->utilisateurDummy->setPass("coUcoucoU1");
        $this->assetEquals("coucoucoU1", $this->utilisateurDummy->getPass());
        
        //mot de passe avec deux majuscules, une minuscule et deux chiffres.
        $this->utilisateurDummy->setPass("coUcoucoU12");
        $this->assetEquals("coucoucoU1", $this->utilisateurDummy->getPass());
    }


    /**
     * @covers Utilisateur::getAdresseMail
     * @todo Implement testGetAdresseMail().
     */
    public function testGetAdresseMail()
    {
        $this->assertEquals("truc@troc.tr", $this->utilisateurDummy->getAdresseMail(), "devrait afficher truc@troc.tr");
    }
    /**
     * @covers Utilisateur::setAdresseMail
     * @todo Implement testSetAdresseMail().
     */
    public function testSetAdresseMail()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }


	/**
     * @covers Utilisateur::getAdressePhysique
     * @todo Implement testGetAdressePhysique().
     */
    public function testGetAdressePhysique()
    {
        $this->assertEquals("rue des petites fleurs 5", $this->utilisateurDummy->getAdressePhysique(), 
        		"devrait afficher rue des petites fleurs 5");
    	
    }
    /**
     * @covers Utilisateur::setAdressePhysique
     * @todo Implement testSetAdressePhysique().
     */
    public function testSetAdressePhysique()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

     /**
     * @covers Utilisateur::getCodePostal
     * @todo Implement testGetCodePostal().
     */
    public function testGetCodePostal()
    {
        $this->assertEquals("1070", $this->utilisateurDummy->getCodePostal(), "devrait afficher 1070");
    	
    }

    /**
     * @covers Utilisateur::setCodePostal
     * @todo Implement testSetCodePostal().
     */
    public function testSetCodePostal()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

   
/**
     * @covers Utilisateur::getLocalite
     * @todo Implement testGetLocalite().
     */
    public function testGetLocalite()
    {
        $this->assertEquals("Anderlecht", $this->utilisateurDummy->getLocalite(), "devrait afficher Anderlecht");
    	
    }
    /**
     * @covers Utilisateur::setLocalite
     * @todo Implement testSetLocalite().
     */
    public function testSetLocalite()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    /**
     * @covers Utilisateur::getDateInscription
     * @todo Implement testGetDateInscription().
     */
    public function testGetDateInscription()
    {
    	
        $this->assertEquals((new DateTime("2015-01-01T00:00:00"))->format('Y-m-d H:i:s'), 
        		$this->utilisateurDummy->getDateInscription(), "devrait afficher 2015-01-01 00:00:00");
    	
    }
    
    /**
     * @covers Utilisateur::setDateInscription
     * @todo Implement testSetDateInscription().
     */
    public function testSetDateInscription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    /**
     * @covers Utilisateur::getIdConnexion
     * @todo Implement testGetIdConnexion().
     */
    public function testGetIdConnexion()
    {
        $this->assertEquals("192.168.0.1", $this->utilisateurDummy->getIdConnexion(), "devrait afficher 192.168.0.1");
    	
    }

    /**
     * @covers Utilisateur::setIdConnexion
     * @todo Implement testSetIdConnexion().
     */
    public function testSetIdConnexion()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    /**
     * @covers Utilisateur::__toString()
     */
    public function testToString()
    {
    	$stringUtilisateur = $this->utilisateurDummy->__toString();
    	$this->assertEquals("<p>Daniel, Dan, DanyDan, Motdepasse1, truc@troc.tr, rue des petites fleurs 5, 1070, Anderlecht, 2015-01-01 00:00:00, 192.168.0.1</p>", $stringUtilisateur);
    }
}
?>
